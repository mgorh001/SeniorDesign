
Lab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  00000372  00000406  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000372  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800142  00800142  00000448  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000478  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011d6  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000834  00000000  00000000  0000173e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006b8  00000000  00000000  00001f72  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  0000262c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006f3  00000000  00000000  000027b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008b8  00000000  00000000  00002ea7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  0000375f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e7       	ldi	r30, 0x72	; 114
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 34       	cpi	r26, 0x42	; 66
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e4       	ldi	r26, 0x42	; 66
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 34       	cpi	r26, 0x43	; 67
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	4e d1       	rcall	.+668    	; 0x338 <main>
  9c:	68 c1       	rjmp	.+720    	; 0x36e <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <_Z16LCD_Send_Commandh>:
uint8_t SPI_Master_Transmit_and_Receive(uint8_t data)
{
	SPDR = data;					// Data to Transmit
	while(!(SPSR & (1 << SPIF)));	// Wait for Completion
	return SPDR;					// Return Received Data
}
  a0:	45 98       	cbi	0x08, 5	; 8
  a2:	44 9a       	sbi	0x08, 4	; 8
  a4:	98 b1       	in	r25, 0x08	; 8
  a6:	90 7f       	andi	r25, 0xF0	; 240
  a8:	28 2f       	mov	r18, r24
  aa:	22 95       	swap	r18
  ac:	2f 70       	andi	r18, 0x0F	; 15
  ae:	92 2b       	or	r25, r18
  b0:	98 b9       	out	0x08, r25	; 8
  b2:	92 e0       	ldi	r25, 0x02	; 2
  b4:	9a 95       	dec	r25
  b6:	f1 f7       	brne	.-4      	; 0xb4 <_Z16LCD_Send_Commandh+0x14>
  b8:	00 c0       	rjmp	.+0      	; 0xba <_Z16LCD_Send_Commandh+0x1a>
  ba:	44 98       	cbi	0x08, 4	; 8
  bc:	ef e1       	ldi	r30, 0x1F	; 31
  be:	f3 e0       	ldi	r31, 0x03	; 3
  c0:	31 97       	sbiw	r30, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <_Z16LCD_Send_Commandh+0x20>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <_Z16LCD_Send_Commandh+0x26>
  c6:	00 00       	nop
  c8:	44 9a       	sbi	0x08, 4	; 8
  ca:	98 b1       	in	r25, 0x08	; 8
  cc:	90 7f       	andi	r25, 0xF0	; 240
  ce:	8f 70       	andi	r24, 0x0F	; 15
  d0:	89 2b       	or	r24, r25
  d2:	88 b9       	out	0x08, r24	; 8
  d4:	f2 e0       	ldi	r31, 0x02	; 2
  d6:	fa 95       	dec	r31
  d8:	f1 f7       	brne	.-4      	; 0xd6 <_Z16LCD_Send_Commandh+0x36>
  da:	00 c0       	rjmp	.+0      	; 0xdc <_Z16LCD_Send_Commandh+0x3c>
  dc:	44 98       	cbi	0x08, 4	; 8
  de:	8f e1       	ldi	r24, 0x1F	; 31
  e0:	93 e0       	ldi	r25, 0x03	; 3
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <_Z16LCD_Send_Commandh+0x42>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <_Z16LCD_Send_Commandh+0x48>
  e8:	00 00       	nop
  ea:	08 95       	ret

000000ec <_Z8LCD_Initv>:
  ec:	3d 9a       	sbi	0x07, 5	; 7
  ee:	3c 9a       	sbi	0x07, 4	; 7
  f0:	87 b1       	in	r24, 0x07	; 7
  f2:	8f 60       	ori	r24, 0x0F	; 15
  f4:	87 b9       	out	0x07, r24	; 7
  f6:	83 e3       	ldi	r24, 0x33	; 51
  f8:	d3 df       	rcall	.-90     	; 0xa0 <_Z16LCD_Send_Commandh>
  fa:	8f ec       	ldi	r24, 0xCF	; 207
  fc:	97 e0       	ldi	r25, 0x07	; 7
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <_Z8LCD_Initv+0x12>
 102:	00 c0       	rjmp	.+0      	; 0x104 <_Z8LCD_Initv+0x18>
 104:	00 00       	nop
 106:	82 e3       	ldi	r24, 0x32	; 50
 108:	cb df       	rcall	.-106    	; 0xa0 <_Z16LCD_Send_Commandh>
 10a:	8f ec       	ldi	r24, 0xCF	; 207
 10c:	97 e0       	ldi	r25, 0x07	; 7
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <_Z8LCD_Initv+0x22>
 112:	00 c0       	rjmp	.+0      	; 0x114 <_Z8LCD_Initv+0x28>
 114:	00 00       	nop
 116:	88 e2       	ldi	r24, 0x28	; 40
 118:	c3 df       	rcall	.-122    	; 0xa0 <_Z16LCD_Send_Commandh>
 11a:	8e e0       	ldi	r24, 0x0E	; 14
 11c:	c1 df       	rcall	.-126    	; 0xa0 <_Z16LCD_Send_Commandh>
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	bf df       	rcall	.-130    	; 0xa0 <_Z16LCD_Send_Commandh>
 122:	8f e3       	ldi	r24, 0x3F	; 63
 124:	9f e1       	ldi	r25, 0x1F	; 31
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <_Z8LCD_Initv+0x3a>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <_Z8LCD_Initv+0x40>
 12c:	00 00       	nop
 12e:	86 e0       	ldi	r24, 0x06	; 6
 130:	b7 df       	rcall	.-146    	; 0xa0 <_Z16LCD_Send_Commandh>
 132:	8f e3       	ldi	r24, 0x3F	; 63
 134:	9f e1       	ldi	r25, 0x1F	; 31
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <_Z8LCD_Initv+0x4a>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <_Z8LCD_Initv+0x50>
 13c:	00 00       	nop
 13e:	08 95       	ret

00000140 <_Z13LCD_Send_Datah>:
 140:	45 9a       	sbi	0x08, 5	; 8
 142:	44 9a       	sbi	0x08, 4	; 8
 144:	98 b1       	in	r25, 0x08	; 8
 146:	90 7f       	andi	r25, 0xF0	; 240
 148:	28 2f       	mov	r18, r24
 14a:	22 95       	swap	r18
 14c:	2f 70       	andi	r18, 0x0F	; 15
 14e:	92 2b       	or	r25, r18
 150:	98 b9       	out	0x08, r25	; 8
 152:	92 e0       	ldi	r25, 0x02	; 2
 154:	9a 95       	dec	r25
 156:	f1 f7       	brne	.-4      	; 0x154 <_Z13LCD_Send_Datah+0x14>
 158:	00 c0       	rjmp	.+0      	; 0x15a <_Z13LCD_Send_Datah+0x1a>
 15a:	44 98       	cbi	0x08, 4	; 8
 15c:	ef e1       	ldi	r30, 0x1F	; 31
 15e:	f3 e0       	ldi	r31, 0x03	; 3
 160:	31 97       	sbiw	r30, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <_Z13LCD_Send_Datah+0x20>
 164:	00 c0       	rjmp	.+0      	; 0x166 <_Z13LCD_Send_Datah+0x26>
 166:	00 00       	nop
 168:	44 9a       	sbi	0x08, 4	; 8
 16a:	98 b1       	in	r25, 0x08	; 8
 16c:	90 7f       	andi	r25, 0xF0	; 240
 16e:	8f 70       	andi	r24, 0x0F	; 15
 170:	89 2b       	or	r24, r25
 172:	88 b9       	out	0x08, r24	; 8
 174:	f2 e0       	ldi	r31, 0x02	; 2
 176:	fa 95       	dec	r31
 178:	f1 f7       	brne	.-4      	; 0x176 <_Z13LCD_Send_Datah+0x36>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <_Z13LCD_Send_Datah+0x3c>
 17c:	44 98       	cbi	0x08, 4	; 8
 17e:	8f e1       	ldi	r24, 0x1F	; 31
 180:	93 e0       	ldi	r25, 0x03	; 3
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <_Z13LCD_Send_Datah+0x42>
 186:	00 c0       	rjmp	.+0      	; 0x188 <_Z13LCD_Send_Datah+0x48>
 188:	00 00       	nop
 18a:	08 95       	ret

0000018c <_Z8LCD_PutsPh>:
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	ec 01       	movw	r28, r24
 192:	88 81       	ld	r24, Y
 194:	88 23       	and	r24, r24
 196:	29 f0       	breq	.+10     	; 0x1a2 <_Z8LCD_PutsPh+0x16>
 198:	21 96       	adiw	r28, 0x01	; 1
 19a:	d2 df       	rcall	.-92     	; 0x140 <_Z13LCD_Send_Datah>
 19c:	89 91       	ld	r24, Y+
 19e:	81 11       	cpse	r24, r1
 1a0:	fc cf       	rjmp	.-8      	; 0x19a <_Z8LCD_PutsPh+0xe>
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <_Z9LCD_Clearv>:
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	7a df       	rcall	.-268    	; 0xa0 <_Z16LCD_Send_Commandh>
 1ac:	8f e3       	ldi	r24, 0x3F	; 63
 1ae:	9f e1       	ldi	r25, 0x1F	; 31
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <_Z9LCD_Clearv+0x8>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <_Z9LCD_Clearv+0xe>
 1b6:	00 00       	nop
 1b8:	08 95       	ret

000001ba <_Z8SPI_Initv>:
 1ba:	84 b1       	in	r24, 0x04	; 4
 1bc:	8c 62       	ori	r24, 0x2C	; 44
 1be:	84 b9       	out	0x04, r24	; 4
 1c0:	83 e5       	ldi	r24, 0x53	; 83
 1c2:	8c bd       	out	0x2c, r24	; 44
 1c4:	8c b5       	in	r24, 0x2c	; 44
 1c6:	84 60       	ori	r24, 0x04	; 4
 1c8:	8c bd       	out	0x2c, r24	; 44
 1ca:	08 95       	ret

000001cc <_Z24SPI_Master_Transmit_Byteh>:
 1cc:	8e bd       	out	0x2e, r24	; 46
 1ce:	0d b4       	in	r0, 0x2d	; 45
 1d0:	07 fe       	sbrs	r0, 7
 1d2:	fd cf       	rjmp	.-6      	; 0x1ce <_Z24SPI_Master_Transmit_Byteh+0x2>
 1d4:	08 95       	ret

000001d6 <_Z25SPI_Master_Write_Registerhh>:
 1d6:	cf 93       	push	r28
 1d8:	c6 2f       	mov	r28, r22
 1da:	f8 df       	rcall	.-16     	; 0x1cc <_Z24SPI_Master_Transmit_Byteh>
 1dc:	87 ec       	ldi	r24, 0xC7	; 199
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <_Z25SPI_Master_Write_Registerhh+0xa>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <_Z25SPI_Master_Write_Registerhh+0x10>
 1e6:	00 00       	nop
 1e8:	8c 2f       	mov	r24, r28
 1ea:	f0 df       	rcall	.-32     	; 0x1cc <_Z24SPI_Master_Transmit_Byteh>
 1ec:	cf 91       	pop	r28
 1ee:	08 95       	ret

000001f0 <_Z23SPI_Master_Receive_Bytev>:
 1f0:	8f ef       	ldi	r24, 0xFF	; 255
 1f2:	8e bd       	out	0x2e, r24	; 46
 1f4:	0d b4       	in	r0, 0x2d	; 45
 1f6:	07 fe       	sbrs	r0, 7
 1f8:	fd cf       	rjmp	.-6      	; 0x1f4 <_Z23SPI_Master_Receive_Bytev+0x4>
 1fa:	8e b5       	in	r24, 0x2e	; 46
 1fc:	08 95       	ret

000001fe <_Z12Make_CS_Highv>:
	return 0;
}

void Make_CS_High()
{ 
	_SPI_PORT |=  (1<<_CS_PIN);
 1fe:	2a 9a       	sbi	0x05, 2	; 5
 200:	08 95       	ret

00000202 <_Z11Make_CS_Lowv>:
}

void Make_CS_Low() 
{
	_SPI_PORT &= ~(1<<_CS_PIN);
 202:	2a 98       	cbi	0x05, 2	; 5
 204:	08 95       	ret

00000206 <_Z9TC72_Initv>:
}

// TC72 Initialize
void TC72_Init()
{
	Make_CS_High();
 206:	fb df       	rcall	.-10     	; 0x1fe <_Z12Make_CS_Highv>
	SPI_Master_Write_Register(CNTL_W, 0x00);
 208:	60 e0       	ldi	r22, 0x00	; 0
 20a:	80 e8       	ldi	r24, 0x80	; 128
	Make_CS_Low();
 20c:	e4 df       	rcall	.-56     	; 0x1d6 <_Z25SPI_Master_Write_Registerhh>
 20e:	f9 cf       	rjmp	.-14     	; 0x202 <_Z11Make_CS_Lowv>
 210:	08 95       	ret

00000212 <_Z20TC72_Get_Temperaturev>:
}

// TC72 Get Temperature
unsigned char TC72_Get_Temperature()
{
 212:	cf 93       	push	r28
	unsigned char _Temperature;
	Make_CS_High();
 214:	f4 df       	rcall	.-24     	; 0x1fe <_Z12Make_CS_Highv>
	SPI_Master_Transmit_Byte(TEMP_MSB);
 216:	82 e0       	ldi	r24, 0x02	; 2
 218:	d9 df       	rcall	.-78     	; 0x1cc <_Z24SPI_Master_Transmit_Byteh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21a:	87 ec       	ldi	r24, 0xC7	; 199
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <_Z20TC72_Get_Temperaturev+0xc>
 222:	00 c0       	rjmp	.+0      	; 0x224 <_Z20TC72_Get_Temperaturev+0x12>
	_delay_us(100);
	_Temperature = SPI_Master_Receive_Byte();
 224:	00 00       	nop
 226:	e4 df       	rcall	.-56     	; 0x1f0 <_Z23SPI_Master_Receive_Bytev>
	Make_CS_Low();
 228:	c8 2f       	mov	r28, r24
 22a:	eb df       	rcall	.-42     	; 0x202 <_Z11Make_CS_Lowv>
	return _Temperature;
}
 22c:	8c 2f       	mov	r24, r28
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <_Z19UI_Display_Homepagev>:

// Display Homepage
void UI_Display_Homepage()
{
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	cd b7       	in	r28, 0x3d	; 61
 238:	de b7       	in	r29, 0x3e	; 62
 23a:	a2 97       	sbiw	r28, 0x22	; 34
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	f8 94       	cli
 240:	de bf       	out	0x3e, r29	; 62
 242:	0f be       	out	0x3f, r0	; 63
 244:	cd bf       	out	0x3d, r28	; 61
	unsigned char messageTitle1[] =	" Robot  Control ";
 246:	81 e1       	ldi	r24, 0x11	; 17
 248:	ea e0       	ldi	r30, 0x0A	; 10
 24a:	f1 e0       	ldi	r31, 0x01	; 1
 24c:	de 01       	movw	r26, r28
 24e:	11 96       	adiw	r26, 0x01	; 1
 250:	01 90       	ld	r0, Z+
 252:	0d 92       	st	X+, r0
 254:	8a 95       	dec	r24
 256:	e1 f7       	brne	.-8      	; 0x250 <_Z19UI_Display_Homepagev+0x1e>
	unsigned char messageTitle2[] =	"  Testing  SPI  ";
 258:	81 e1       	ldi	r24, 0x11	; 17
 25a:	eb e1       	ldi	r30, 0x1B	; 27
 25c:	f1 e0       	ldi	r31, 0x01	; 1
 25e:	de 01       	movw	r26, r28
 260:	52 96       	adiw	r26, 0x12	; 18
 262:	01 90       	ld	r0, Z+
 264:	0d 92       	st	X+, r0
 266:	8a 95       	dec	r24
 268:	e1 f7       	brne	.-8      	; 0x262 <_Z19UI_Display_Homepagev+0x30>
	LCD_Clear();
 26a:	9e df       	rcall	.-196    	; 0x1a8 <_Z9LCD_Clearv>
		
		case 4:
			address = 0xD4 + (column - 1);
			break;
	}
	LCD_Send_Command(address);		// Move Cursor
 26c:	80 e8       	ldi	r24, 0x80	; 128
 26e:	18 df       	rcall	.-464    	; 0xa0 <_Z16LCD_Send_Commandh>
	LCD_Set_Cursor(1, 1);
	LCD_Puts(messageTitle1);
 270:	ce 01       	movw	r24, r28
 272:	01 96       	adiw	r24, 0x01	; 1
 274:	8b df       	rcall	.-234    	; 0x18c <_Z8LCD_PutsPh>
 276:	80 ec       	ldi	r24, 0xC0	; 192
	LCD_Set_Cursor(2, 1);
	LCD_Puts(messageTitle2);
 278:	13 df       	rcall	.-474    	; 0xa0 <_Z16LCD_Send_Commandh>
 27a:	ce 01       	movw	r24, r28
 27c:	42 96       	adiw	r24, 0x12	; 18
 27e:	86 df       	rcall	.-244    	; 0x18c <_Z8LCD_PutsPh>
}
 280:	a2 96       	adiw	r28, 0x22	; 34
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	f8 94       	cli
 286:	de bf       	out	0x3e, r29	; 62
 288:	0f be       	out	0x3f, r0	; 63
 28a:	cd bf       	out	0x3d, r28	; 61
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	08 95       	ret

00000292 <_Z22UI_Display_Temperaturev>:

// Display Temperature ( 0 < T < 99 )
void UI_Display_Temperature()
{
 292:	1f 93       	push	r17
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	cd b7       	in	r28, 0x3d	; 61
 29a:	de b7       	in	r29, 0x3e	; 62
 29c:	66 97       	sbiw	r28, 0x16	; 22
 29e:	0f b6       	in	r0, 0x3f	; 63
 2a0:	f8 94       	cli
 2a2:	de bf       	out	0x3e, r29	; 62
 2a4:	0f be       	out	0x3f, r0	; 63
 2a6:	cd bf       	out	0x3d, r28	; 61
	unsigned char messageS1[] = "  Temperature   ";
 2a8:	81 e1       	ldi	r24, 0x11	; 17
 2aa:	ec e2       	ldi	r30, 0x2C	; 44
 2ac:	f1 e0       	ldi	r31, 0x01	; 1
 2ae:	de 01       	movw	r26, r28
 2b0:	11 96       	adiw	r26, 0x01	; 1
 2b2:	01 90       	ld	r0, Z+
 2b4:	0d 92       	st	X+, r0
 2b6:	8a 95       	dec	r24
 2b8:	e1 f7       	brne	.-8      	; 0x2b2 <_Z22UI_Display_Temperaturev+0x20>
	unsigned char messageS2[] = "  T=";
 2ba:	85 e0       	ldi	r24, 0x05	; 5
 2bc:	ed e3       	ldi	r30, 0x3D	; 61
 2be:	f1 e0       	ldi	r31, 0x01	; 1
 2c0:	de 01       	movw	r26, r28
 2c2:	52 96       	adiw	r26, 0x12	; 18
 2c4:	01 90       	ld	r0, Z+
 2c6:	0d 92       	st	X+, r0
 2c8:	8a 95       	dec	r24
 2ca:	e1 f7       	brne	.-8      	; 0x2c4 <_Z22UI_Display_Temperaturev+0x32>
	
	LCD_Clear();
 2cc:	6d df       	rcall	.-294    	; 0x1a8 <_Z9LCD_Clearv>
 2ce:	80 e8       	ldi	r24, 0x80	; 128
 2d0:	e7 de       	rcall	.-562    	; 0xa0 <_Z16LCD_Send_Commandh>
	LCD_Set_Cursor(1, 1);
	LCD_Puts(messageS1);
 2d2:	ce 01       	movw	r24, r28
 2d4:	01 96       	adiw	r24, 0x01	; 1
 2d6:	5a df       	rcall	.-332    	; 0x18c <_Z8LCD_PutsPh>
 2d8:	82 ec       	ldi	r24, 0xC2	; 194
	LCD_Set_Cursor(2, 3);
	LCD_Puts(messageS2);
 2da:	e2 de       	rcall	.-572    	; 0xa0 <_Z16LCD_Send_Commandh>
 2dc:	ce 01       	movw	r24, r28
 2de:	42 96       	adiw	r24, 0x12	; 18
 2e0:	55 df       	rcall	.-342    	; 0x18c <_Z8LCD_PutsPh>
	LCD_Putchar(DEC_TO_ASCII[Temperature / 10]);
 2e2:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <__data_end>
 2e6:	1d ec       	ldi	r17, 0xCD	; 205
 2e8:	e1 9f       	mul	r30, r17
 2ea:	e1 2d       	mov	r30, r1
 2ec:	11 24       	eor	r1, r1
 2ee:	e6 95       	lsr	r30
 2f0:	e6 95       	lsr	r30
 2f2:	e6 95       	lsr	r30
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	e0 50       	subi	r30, 0x00	; 0
}

// Write Character to LCD
void LCD_Putchar(char c)
{
	LCD_Send_Data(c);
 2f8:	ff 4f       	sbci	r31, 0xFF	; 255
 2fa:	80 81       	ld	r24, Z
 2fc:	21 df       	rcall	.-446    	; 0x140 <_Z13LCD_Send_Datah>
	LCD_Putchar(DEC_TO_ASCII[Temperature % 10]);
 2fe:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <__data_end>
 302:	e1 9f       	mul	r30, r17
 304:	11 2d       	mov	r17, r1
 306:	11 24       	eor	r1, r1
 308:	16 95       	lsr	r17
 30a:	16 95       	lsr	r17
 30c:	16 95       	lsr	r17
 30e:	11 0f       	add	r17, r17
 310:	81 2f       	mov	r24, r17
 312:	88 0f       	add	r24, r24
 314:	88 0f       	add	r24, r24
 316:	18 0f       	add	r17, r24
 318:	e1 1b       	sub	r30, r17
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	e0 50       	subi	r30, 0x00	; 0
 31e:	ff 4f       	sbci	r31, 0xFF	; 255
 320:	80 81       	ld	r24, Z
 322:	0e df       	rcall	.-484    	; 0x140 <_Z13LCD_Send_Datah>
}
 324:	66 96       	adiw	r28, 0x16	; 22
 326:	0f b6       	in	r0, 0x3f	; 63
 328:	f8 94       	cli
 32a:	de bf       	out	0x3e, r29	; 62
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	cd bf       	out	0x3d, r28	; 61
 330:	df 91       	pop	r29
 332:	cf 91       	pop	r28
 334:	1f 91       	pop	r17
 336:	08 95       	ret

00000338 <main>:
void TC72_Init();
unsigned char TC72_Get_Temperature();

int main( void )
{
	SPI_Init();
 338:	40 df       	rcall	.-384    	; 0x1ba <_Z8SPI_Initv>
	TC72_Init();
 33a:	65 df       	rcall	.-310    	; 0x206 <_Z9TC72_Initv>
	LCD_Init();
 33c:	d7 de       	rcall	.-594    	; 0xec <_Z8LCD_Initv>
 33e:	79 df       	rcall	.-270    	; 0x232 <_Z19UI_Display_Homepagev>
	UI_Display_Homepage();
 340:	2f ef       	ldi	r18, 0xFF	; 255
 342:	84 e3       	ldi	r24, 0x34	; 52
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 344:	9c e0       	ldi	r25, 0x0C	; 12
 346:	21 50       	subi	r18, 0x01	; 1
 348:	80 40       	sbci	r24, 0x00	; 0
 34a:	90 40       	sbci	r25, 0x00	; 0
 34c:	e1 f7       	brne	.-8      	; 0x346 <main+0xe>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <main+0x18>
 350:	00 00       	nop
 352:	5f df       	rcall	.-322    	; 0x212 <_Z20TC72_Get_Temperaturev>
	_delay_ms(500);
	while(1)
	{
		Temperature = TC72_Get_Temperature();
 354:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end>
 358:	9c df       	rcall	.-200    	; 0x292 <_Z22UI_Display_Temperaturev>
 35a:	2f ef       	ldi	r18, 0xFF	; 255
		 UI_Display_Temperature();
 35c:	89 e6       	ldi	r24, 0x69	; 105
 35e:	98 e1       	ldi	r25, 0x18	; 24
 360:	21 50       	subi	r18, 0x01	; 1
 362:	80 40       	sbci	r24, 0x00	; 0
 364:	90 40       	sbci	r25, 0x00	; 0
 366:	e1 f7       	brne	.-8      	; 0x360 <main+0x28>
 368:	00 c0       	rjmp	.+0      	; 0x36a <main+0x32>
 36a:	00 00       	nop
 36c:	f2 cf       	rjmp	.-28     	; 0x352 <main+0x1a>

0000036e <_exit>:
 36e:	f8 94       	cli

00000370 <__stop_program>:
 370:	ff cf       	rjmp	.-2      	; 0x370 <__stop_program>
